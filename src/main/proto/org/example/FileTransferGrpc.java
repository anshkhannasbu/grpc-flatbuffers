//Generated by flatc compiler (version 1.11.0)
//If you make any local changes, they will be lost
//source: FileTransfer.fbs

package org.example;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: FileTransfer.fbs")
public final class FileTransferGrpc {

  private FileTransferGrpc() {}
  
  public static final String SERVICE_NAME = "org.example.FileTransfer";
  
  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getSendDataMethod()} instead. 
  public static final io.grpc.MethodDescriptor<org.example.TransferMsg,
      org.example.TransferReply> METHOD_SEND_DATA = getSendDataMethod();
  
  private static volatile io.grpc.MethodDescriptor<org.example.TransferMsg,
      org.example.TransferReply> getSendDataMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<org.example.TransferMsg> extractorOfTransferMsg;
  private static FlatbuffersUtils.FBExtactor<org.example.TransferMsg> getExtractorOfTransferMsg() {
      if (extractorOfTransferMsg != null) return extractorOfTransferMsg;
      synchronized (FileTransferGrpc.class) {
          if (extractorOfTransferMsg != null) return extractorOfTransferMsg;
          extractorOfTransferMsg = new FlatbuffersUtils.FBExtactor<org.example.TransferMsg>() {
              public org.example.TransferMsg extract (ByteBuffer buffer) {
                  return org.example.TransferMsg.getRootAsTransferMsg(buffer);
              }
          };
          return extractorOfTransferMsg;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<org.example.TransferReply> extractorOfTransferReply;
  private static FlatbuffersUtils.FBExtactor<org.example.TransferReply> getExtractorOfTransferReply() {
      if (extractorOfTransferReply != null) return extractorOfTransferReply;
      synchronized (FileTransferGrpc.class) {
          if (extractorOfTransferReply != null) return extractorOfTransferReply;
          extractorOfTransferReply = new FlatbuffersUtils.FBExtactor<org.example.TransferReply>() {
              public org.example.TransferReply extract (ByteBuffer buffer) {
                  return org.example.TransferReply.getRootAsTransferReply(buffer);
              }
          };
          return extractorOfTransferReply;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<org.example.TransferMsg,
      org.example.TransferReply> getSendDataMethod() {
    io.grpc.MethodDescriptor<org.example.TransferMsg, org.example.TransferReply> getSendDataMethod;
    if ((getSendDataMethod = FileTransferGrpc.getSendDataMethod) == null) {
      synchronized (FileTransferGrpc.class) {
        if ((getSendDataMethod = FileTransferGrpc.getSendDataMethod) == null) {
          FileTransferGrpc.getSendDataMethod = getSendDataMethod = 
              io.grpc.MethodDescriptor.<org.example.TransferMsg, org.example.TransferReply>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
              .setFullMethodName(generateFullMethodName(
                  "org.example.FileTransfer", "SendData"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  org.example.TransferMsg.class, getExtractorOfTransferMsg()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  org.example.TransferReply.class, getExtractorOfTransferReply()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getSendDataMethod;
  }
  
  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static FileTransferStub newStub(io.grpc.Channel channel) {
    return new FileTransferStub(channel);
  }
  
  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static FileTransferBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new FileTransferBlockingStub(channel);
  }
  
  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static FileTransferFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new FileTransferFutureStub(channel);
  }
  
  /**
   */
  public static abstract class FileTransferImplBase implements io.grpc.BindableService {
    
    /**
     */
    public     io.grpc.stub.StreamObserver<org.example.TransferMsg> sendData(
        io.grpc.stub.StreamObserver<org.example.TransferReply> responseObserver)     {
      return asyncUnimplementedStreamingCall(getSendDataMethod(), responseObserver);
    }
    
    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getSendDataMethod(),
            asyncBidiStreamingCall(
              new MethodHandlers<
                org.example.TransferMsg,
                org.example.TransferReply>(
                  this, METHODID_SEND_DATA)))
          .build();
    }
  }
  
  /**
   */
  public static final class FileTransferStub extends io.grpc.stub.AbstractStub<FileTransferStub> {
    private FileTransferStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private FileTransferStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected FileTransferStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new FileTransferStub(channel, callOptions);
    }
    
    /**
     */
    public     io.grpc.stub.StreamObserver<org.example.TransferMsg> sendData(
        io.grpc.stub.StreamObserver<org.example.TransferReply> responseObserver)     {
      return asyncBidiStreamingCall(
          getChannel().newCall(getSendDataMethod(), getCallOptions()), responseObserver);
    }
  }
  
  /**
   */
  public static final class FileTransferBlockingStub extends io.grpc.stub.AbstractStub<FileTransferBlockingStub> {
    private FileTransferBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private FileTransferBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected FileTransferBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new FileTransferBlockingStub(channel, callOptions);
    }
  }
  
  /**
   */
  public static final class FileTransferFutureStub extends io.grpc.stub.AbstractStub<FileTransferFutureStub> {
    private FileTransferFutureStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private FileTransferFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected FileTransferFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new FileTransferFutureStub(channel, callOptions);
    }
  }
  
  private static final int METHODID_SEND_DATA = 0;
  
  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final FileTransferImplBase serviceImpl;
    private final int methodId;
  
    MethodHandlers(FileTransferImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }
  
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_SEND_DATA:
          return (io.grpc.stub.StreamObserver<Req>) serviceImpl.sendData(
              (io.grpc.stub.StreamObserver<org.example.TransferReply>) responseObserver);
        default:
          throw new AssertionError();
      }
    }
  }
  
  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
  
  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (FileTransferGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              
              .setSchemaDescriptor(null)              
              .addMethod(getSendDataMethod())              
              .build();
        }
      }
    }
    return result;
  }
}
